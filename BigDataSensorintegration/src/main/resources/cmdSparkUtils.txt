# Run application locally on 8 cores
./bin/spark-submit \
  --class org.apache.spark.examples.SparkPi \
  --master local[8] \
  /path/to/examples.jar \
  100

# Run on a Spark standalone cluster in client deploy mode
./bin/spark-submit \
  --class org.apache.spark.examples.SparkPi \
  --master spark://207.184.161.138:7077 \
  --executor-memory 20G \
  --total-executor-cores 100 \
  /path/to/examples.jar \
  1000

# Run on a Spark standalone cluster in cluster deploy mode with supervise
./bin/spark-submit \
  --class org.apache.spark.examples.SparkPi \
  --master spark://207.184.161.138:7077 \
  --deploy-mode cluster \
  --supervise \
  --executor-memory 20G \
  --total-executor-cores 100 \
  /path/to/examples.jar \
  1000

# Run on a YARN cluster
export HADOOP_CONF_DIR=XXX
./bin/spark-submit \
  --class org.apache.spark.examples.SparkPi \
  --master yarn \
  --deploy-mode cluster \  # can be client for client mode
  --executor-memory 20G \
  --num-executors 50 \
  /path/to/examples.jar \
  1000

# Run a Python application on a Spark standalone cluster
./bin/spark-submit \
  --master spark://207.184.161.138:7077 \
  examples/src/main/python/pi.py \
  1000

# Run on a Mesos cluster in cluster deploy mode with supervise
./bin/spark-submit \
  --class org.apache.spark.examples.SparkPi \
  --master mesos://207.184.161.138:7077 \
  --deploy-mode cluster \
  --supervise \
  --executor-memory 20G \
  --total-executor-cores 100 \
  http://path/to/examples.jar \
  1000

# Run on a Kubernetes cluster in cluster deploy mode
./bin/spark-submit \
  --class org.apache.spark.examples.SparkPi \
  --master k8s://xx.yy.zz.ww:443 \
  --deploy-mode cluster \
  --executor-memory 20G \
  --num-executors 50 \
  http://path/to/examples.jar \
  1000





  //        int slices = (args.length == 1) ? Integer.parseInt(args[0]) : 2;
  //        int n = 100000 * slices;
  //        List<Integer> l = new ArrayList<>(n);
  //        for (int i = 0; i < n; i++) {
  //            l.add(i);
  //        }
  //
  //        JavaRDD<Integer> dataSet = jsc.parallelize(l, slices);
  //
  //        int count = dataSet.map(new Function<Integer, Integer>() {
  //            @Override
  //            public Integer call(Integer integer) throws Exception {
  //                double x = Math.random() * 2 - 1;
  //                double y = Math.random() * 2 - 1;
  //                return (x * x + y * y <= 1) ? 1 : 0;
  //            }
  //        }).reduce(new Function2<Integer, Integer, Integer>() {
  //            @Override
  //            public Integer call(Integer integer, Integer integer2) throws Exception {
  //                return ((Integer) integer) + ((Integer) integer2);
  //            }
  //        });
  //
  //        System.out.println("Pi is roughly " + 4.0 * count / n);





















  //        csv.writeStream().format("console").outputMode(OutputMode.Append()).start();

  //        String path = "csvData.csv";
  //        JavaRDD<String> lines = jsc.textFile(path);
  ////        lines.collect();
  //
  //        for(String line:lines.collect()){
  //            System.out.println(line);
  //        }
  //
  //        lines.saveAsTextFile("hdfs://10.111.0.250:8020/user/team_7/sensorDataIntegration");
  //